from langsmith import traceable
import logging
import config
import re
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from io import BytesIO
import base64

class ResponseSynthesizer:
    def __init__(self):
        self.logger = logging.getLogger("response_synthesizer")
        self.max_text_length = 4000  # –õ–∏–º–∏—Ç Telegram –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        self.max_caption_length = 1000  # –õ–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å–µ–π –∫ –º–µ–¥–∏–∞

    @traceable
    def synthesize(self, agent_response: dict, user_context: dict) -> dict:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.
        
        :param agent_response: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ (DataStoryteller, GeneralAssistant –∏ –¥—Ä.)
        :param user_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—è–∑—ã–∫, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
        :return: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ {type, content, buttons}, –≥–æ—Ç–æ–≤–∞—è –¥–ª—è Telegram API
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            response_type = agent_response.get("type", "text")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            if "error" in agent_response:
                return self._format_error(agent_response)
            
            # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º –æ—Ç–≤–µ—Ç–∞
            if response_type == "text":
                return self._format_text(agent_response, user_context)
            elif response_type == "image":
                return self._format_image(agent_response, user_context)
            elif response_type == "mixed":
                return self._format_mixed(agent_response, user_context)
            else:
                return self._format_fallback(agent_response)

        except Exception as e:
            self.logger.error(f"Response synthesis failed: {str(e)}")
            return {
                "type": "text",
                "content": "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å.",
                "buttons": []
            }

    def _format_text(self, response: dict, context: dict) -> dict:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–æ–≤ Telegram"""
        text = response["content"]
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(text) > self.max_text_length:
            text = text[:self.max_text_length - 100] + "..." 
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É
        formatted_text = self._apply_telegram_formatting(text, context)
        
        return {
            "type": "text",
            "content": formatted_text,
            "buttons": self._generate_buttons(response, context)
        }

    def _format_image(self, response: dict, context: dict) -> dict:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ base64 –¥–∞–Ω–Ω—ã—Ö
        if not response["content"]["data"].startswith("data:image/png;base64,"):
            image_data = f"data:image/png;base64,{response['content']['data']}"
        else:
            image_data = response["content"]["data"]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
        caption = response.get("caption", "–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞")
        if len(caption) > self.max_caption_length:
            caption = caption[:self.max_caption_length - 50] + "..."

        formatted_caption = self._apply_telegram_formatting(caption, context)
        
        return {
            "type": "image",
            "content": {
                "image": image_data,
                "caption": formatted_caption
            },
            "buttons": self._generate_buttons(response, context)
        }

    def _format_mixed(self, response: dict, context: dict) -> dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (—Ç–µ–∫—Å—Ç + –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)"""
        # Telegram –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç + —Ñ–æ—Ç–æ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ 2 —Å–æ–æ–±—â–µ–Ω–∏—è: —Å–Ω–∞—á–∞–ª–∞ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é, –∑–∞—Ç–µ–º —Ç–µ–∫—Å—Ç
        image_part = {
            "type": "image",
            "content": response["content"]["image"],
            "caption": response.get("caption", "")
        }
        
        text_part = {
            "type": "text",
            "content": response["content"]["text"]
        }
        
        return {
            "type": "multi",
            "content": [
                self._format_image(image_part, context),
                self._format_text(text_part, context)
            ]
        }

    def _generate_buttons(self, response: dict, context: dict) -> list:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è Telegram"""
        buttons = []
        
        # 1. –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ –æ—Ç–≤–µ—Ç–∞ –∞–≥–µ–Ω—Ç–∞
        for action in response.get("actions", []):
            buttons.append(
                InlineKeyboardButton(
                    action["title"], 
                    callback_data=f"action:{action['command']}"
                )
            )
        
        # 2. –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã (suggestions)
        if "suggestions" in response:
            for suggestion in response["suggestions"]:
                buttons.append(
                    InlineKeyboardButton(
                        f"üîç {suggestion}", 
                        callback_data=f"quick:{suggestion[:30]}"
                    )
                )
        
        # 3. –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        buttons.append(
            InlineKeyboardButton("üìä –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", callback_data="new_query")
        )
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        return [buttons[i:i+2] for i in range(0, len(buttons), 2)]

    def _apply_telegram_formatting(self, text: str, context: dict) -> str:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç Telegram-—Ä–∞–∑–º–µ—Ç–∫—É –∫ —Ç–µ–∫—Å—Ç—É"""
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        formatted = re.sub(r'\*\*(.*?)\*\*', r'*\1*', text)  # –ñ–∏—Ä–Ω—ã–π -> –ö—É—Ä—Å–∏–≤
        formatted = re.sub(r'__(.*?)__', r'_\1_', formatted)  # –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        if "analytics" in context.get("response_type", ""):
            formatted = "üìà " + formatted
        elif "error" in context:
            formatted = "‚ö†Ô∏è " + formatted
        
        return formatted

    def _format_error(self, response: dict) -> dict:
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫"""
        return {
            "type": "text",
            "content": f"üö´ –û—à–∏–±–∫–∞: {response.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n\n{response.get('details', '')}",
            "buttons": [
                [InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="help")]
            ]
        }

    def _format_fallback(self, response: dict) -> dict:
        """–§–æ–ª–±—ç–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
        return {
            "type": "text",
            "content": str(response)[:self.max_text_length],
            "buttons": []
        }